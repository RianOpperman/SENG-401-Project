import errors from "./errors/index.js";
import Live from "./classes/live.js";
import Emitter from "./classes/emitter.js";
interface BasePatch {
    path: string;
}
export interface AddPatch extends BasePatch {
    op: "add";
    value: any;
}
export interface RemovePatch extends BasePatch {
    op: "remove";
}
export interface ReplacePatch extends BasePatch {
    op: "replace";
    value: any;
}
export interface ChangePatch extends BasePatch {
    op: "change";
    value: string;
}
export declare type Patch = AddPatch | RemovePatch | ReplacePatch | ChangePatch;
interface ResultOk<T> {
    result: T;
    error?: never;
}
interface ResultErr {
    result?: never;
    error: Error;
}
export declare type Result<T = unknown> = ResultOk<T> | ResultErr;
export interface RootAuth {
    user: string;
    pass: string;
}
export interface NamespaceAuth {
    NS: string;
    user: string;
    pass: string;
}
export interface DatabaseAuth {
    NS: string;
    DB: string;
    user: string;
    pass: string;
}
export interface ScopeAuth {
    NS: string;
    DB: string;
    SC: string;
    [key: string]: unknown;
}
export declare type Auth = RootAuth | NamespaceAuth | DatabaseAuth | ScopeAuth;
export default class Surreal extends Emitter {
    #private;
    /**
     * The Instance static singleton ensures that a single database instance is available across very large or complicated applications.
     * With the singleton, only one connection to the database is instantiated, and the database connection does not have to be shared
     * across components or controllers.
     * @return A Surreal instance.
     */
    static get Instance(): Surreal;
    static get AuthenticationError(): typeof errors.AuthenticationError;
    static get PermissionError(): typeof errors.PermissionError;
    static get RecordError(): typeof errors.RecordError;
    static get Live(): typeof Live;
    get token(): string | undefined;
    set token(token: string | undefined);
    /**
     * Initializee a SurrealDb.
     * @param url - The url of the database endpoint to connect to.
     * @param token - The authorization token.
     */
    constructor(url?: string, token?: string);
    /**
     * Connects to a local or remote database endpoint.
     * @param url - The url of the database endpoint to connect to.
     */
    connect(url: string): Promise<void>;
    sync(query: string, vars?: Record<string, unknown>): Live;
    /**
     * Waits for the connection to the database to succeed.
     */
    wait(): Promise<void>;
    /**
     * Closes the persistent connection to the database.
     */
    close(): void;
    /**
     * Ping SurrealDB instance
     */
    ping(): Promise<void>;
    /**
     * Switch to a specific namespace and database.
     * @param ns - Switches to a specific namespace.
     * @param db - Switches to a specific database.
     */
    use(ns: string, db: string): Promise<void>;
    /**
     * Retreive info about the current Surreal instance
     * @return Returns nothing!
     */
    info(): Promise<void>;
    /**
     * Signs up to a specific authentication scope.
     * @param vars - Variables used in a signup query.
     * @return The authenication token.
     */
    signup(vars: Auth): Promise<string>;
    /**
     * Signs in to a specific authentication scope.
     * @param vars - Variables used in a signin query.
     * @return The authenication token.
     */
    signin(vars: Auth): Promise<string>;
    /**
     * Invalidates the authentication for the current connection.
     */
    invalidate(): Promise<void>;
    /**
     * Authenticates the current connection with a JWT token.
     * @param token - The JWT authentication token.
     */
    authenticate(token: string): Promise<void>;
    live(table: string): Promise<string>;
    /**
     * Kill a specific query.
     * @param query - The query to kill.
     */
    kill(query: string): Promise<void>;
    /**
     * Switch to a specific namespace and database.
     * @param key - Specifies the name of the variable.
     * @param val - Assigns the value to the variable name.
     */
    let(key: string, val: unknown): Promise<string>;
    /**
     * Runs a set of SurrealQL statements against the database.
     * @param query - Specifies the SurrealQL statements.
     * @param vars - Assigns variables which can be used in the query.
     */
    query<T = Result[]>(query: string, vars?: Record<string, unknown>): Promise<T>;
    /**
     * Selects all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    select<T>(thing: string): Promise<T[]>;
    /**
     * Creates a record in the database.
     * @param thing - The table name or the specific record ID to create.
     * @param data - The document / record data to insert.
     */
    create<T extends Record<string, unknown>>(thing: string, data?: T): Promise<T & {
        id: string;
    }>;
    /**
     * Updates all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function replaces the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to update.
     * @param data - The document / record data to insert.
     */
    update<T extends Record<string, unknown>>(thing: string, data?: T): Promise<T & {
        id: string;
    }>;
    /**
     * Modifies all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function merges the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to change.
     * @param data - The document / record data to insert.
     */
    change<T extends Record<string, unknown>, U extends Record<string, unknown> = T>(thing: string, data?: Partial<T> & U): Promise<(T & U & {
        id: string;
    }) | (T & U & {
        id: string;
    })[]>;
    /**
     * Applies JSON Patch changes to all records, or a specific record, in the database.
     *
     * ***NOTE: This function patches the current document / record data with the specified JSON Patch data.***
     * @param thing - The table name or the specific record ID to modify.
     * @param data - The JSON Patch data with which to modify the records.
     */
    modify(thing: string, data?: Patch[]): Promise<Patch[]>;
    /**
     * Deletes all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    delete(thing: string): Promise<void>;
}
export {};
