var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Live_id, _Live_db, _Live_sql, _Live_vars;
import Emitter from "./emitter.js";
export default class Live extends Emitter {
    constructor(db, sql, vars) {
        super();
        _Live_id.set(this, void 0);
        _Live_db.set(this, void 0);
        _Live_sql.set(this, void 0);
        _Live_vars.set(this, void 0);
        __classPrivateFieldSet(this, _Live_db, db, "f");
        __classPrivateFieldSet(this, _Live_sql, sql, "f");
        __classPrivateFieldSet(this, _Live_vars, vars, "f");
        // @ts-expect-error ready was never set
        if (__classPrivateFieldGet(this, _Live_db, "f").ready) {
            this.open();
        }
        __classPrivateFieldGet(this, _Live_db, "f").on("opened", () => {
            this.open();
        });
        __classPrivateFieldGet(this, _Live_db, "f").on("closed", () => {
            __classPrivateFieldSet(this, _Live_id, undefined, "f");
        });
        __classPrivateFieldGet(this, _Live_db, "f").on("notify", (e) => {
            if (e.query === __classPrivateFieldGet(this, _Live_id, "f")) {
                switch (e.action) {
                    case "CREATE":
                        return this.emit("create", e.result);
                    case "UPDATE":
                        return this.emit("update", e.result);
                    case "DELETE":
                        return this.emit("delete", e.result);
                }
            }
        });
    }
    // If we want to kill the live query
    // then we can kill it. Once a query
    // has been killed it can be opened
    // again by calling the open() method.
    kill() {
        if (__classPrivateFieldGet(this, _Live_id, "f") === undefined)
            return;
        const res = __classPrivateFieldGet(this, _Live_db, "f").kill(__classPrivateFieldGet(this, _Live_id, "f"));
        __classPrivateFieldSet(this, _Live_id, undefined, "f");
        return res;
    }
    // If the live query has been manually
    // killed, then calling the open()
    // method will re-enable the query.
    open() {
        if (__classPrivateFieldGet(this, _Live_id, "f") !== undefined)
            return;
        return __classPrivateFieldGet(this, _Live_db, "f").query(__classPrivateFieldGet(this, _Live_sql, "f"), __classPrivateFieldGet(this, _Live_vars, "f")).then((res) => {
            if (res[0] && Array.isArray(res[0].result) && res[0].result[0]) {
                __classPrivateFieldSet(this, _Live_id, res[0].result[0], "f");
            }
        });
    }
}
_Live_id = new WeakMap(), _Live_db = new WeakMap(), _Live_sql = new WeakMap(), _Live_vars = new WeakMap();
//# sourceMappingURL=live.js.map