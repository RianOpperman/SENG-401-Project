var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Emitter_events;
export default class Emitter {
    constructor() {
        _Emitter_events.set(this, {});
    }
    on(e, func) {
        if (typeof __classPrivateFieldGet(this, _Emitter_events, "f")[e] !== "object") {
            __classPrivateFieldGet(this, _Emitter_events, "f")[e] = [];
        }
        __classPrivateFieldGet(this, _Emitter_events, "f")[e].push(func);
    }
    off(e, func) {
        if (typeof __classPrivateFieldGet(this, _Emitter_events, "f")[e] === "object") {
            const idx = __classPrivateFieldGet(this, _Emitter_events, "f")[e].indexOf(func);
            if (idx > -1) {
                __classPrivateFieldGet(this, _Emitter_events, "f")[e].splice(idx, 1);
            }
        }
    }
    once(e, func) {
        this.on(e, function f(...args) {
            this.off(e, f);
            func.apply(this, args);
        });
    }
    emit(e, ...args) {
        if (typeof __classPrivateFieldGet(this, _Emitter_events, "f")[e] === "object") {
            __classPrivateFieldGet(this, _Emitter_events, "f")[e].forEach((func) => {
                func.apply(this, args);
            });
        }
    }
    removeAllListeners(e) {
        if (e) {
            if (typeof __classPrivateFieldGet(this, _Emitter_events, "f")[e] === "object") {
                __classPrivateFieldGet(this, _Emitter_events, "f")[e] = [];
            }
        }
        else {
            for (const e in __classPrivateFieldGet(this, _Emitter_events, "f")) {
                __classPrivateFieldGet(this, _Emitter_events, "f")[e] = [];
            }
        }
    }
}
_Emitter_events = new WeakMap();
//# sourceMappingURL=emitter.js.map