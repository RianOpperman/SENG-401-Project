var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Surreal_instances, _Surreal_ws, _Surreal_url, _Surreal_token, _Surreal_pinger, _Surreal_attempted, _Surreal_init, _Surreal_send, _Surreal_auth, _Surreal_signin, _Surreal_signup, _Surreal_result, _Surreal_output;
// deno-lint-ignore-file no-explicit-any
import guid from "./utils/guid.js";
import errors from "./errors/index.js";
import Live from "./classes/live.js";
import Socket from "./classes/socket.js";
import Pinger from "./classes/pinger.js";
import Emitter from "./classes/emitter.js";
let singleton;
export default class Surreal extends Emitter {
    // ------------------------------
    // Methods
    // ------------------------------
    /**
     * Initializee a SurrealDb.
     * @param url - The url of the database endpoint to connect to.
     * @param token - The authorization token.
     */
    constructor(url, token) {
        super();
        _Surreal_instances.add(this);
        // ------------------------------
        // Properties
        // ------------------------------
        _Surreal_ws.set(this, void 0);
        _Surreal_url.set(this, void 0);
        _Surreal_token.set(this, void 0);
        _Surreal_pinger.set(this, void 0);
        _Surreal_attempted.set(this, void 0);
        __classPrivateFieldSet(this, _Surreal_url, url, "f");
        __classPrivateFieldSet(this, _Surreal_token, token, "f");
        if (url) {
            this.connect(url);
        }
    }
    // ------------------------------
    // Main singleton
    // ------------------------------
    /**
     * The Instance static singleton ensures that a single database instance is available across very large or complicated applications.
     * With the singleton, only one connection to the database is instantiated, and the database connection does not have to be shared
     * across components or controllers.
     * @return A Surreal instance.
     */
    static get Instance() {
        return singleton ? singleton : singleton = new Surreal();
    }
    // ------------------------------
    // Public types
    // ------------------------------
    static get AuthenticationError() {
        return errors.AuthenticationError;
    }
    static get PermissionError() {
        return errors.PermissionError;
    }
    static get RecordError() {
        return errors.RecordError;
    }
    static get Live() {
        return Live;
    }
    // ------------------------------
    // Accessors
    // ------------------------------
    get token() {
        return __classPrivateFieldGet(this, _Surreal_token, "f");
    }
    set token(token) {
        __classPrivateFieldSet(this, _Surreal_token, token, "f");
    }
    /**
     * Connects to a local or remote database endpoint.
     * @param url - The url of the database endpoint to connect to.
     */
    connect(url) {
        // Next we setup the websocket connection
        // and listen for events on the socket,
        // specifying whether logging is enabled.
        __classPrivateFieldSet(this, _Surreal_ws, new Socket(url), "f");
        // Setup the interval pinger so that the
        // connection is kept alive through
        // loadbalancers and proxies.
        __classPrivateFieldSet(this, _Surreal_pinger, new Pinger(30000), "f");
        // When the connection is opened we
        // need to attempt authentication if
        // a token has already been applied.
        __classPrivateFieldGet(this, _Surreal_ws, "f").on("open", () => {
            __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_init).call(this);
        });
        // When the connection is opened we
        // change the relevant properties
        // open live queries, and trigger.
        __classPrivateFieldGet(this, _Surreal_ws, "f").on("open", () => {
            this.emit("open");
            this.emit("opened");
            __classPrivateFieldGet(this, _Surreal_pinger, "f").start(() => {
                this.ping();
            });
        });
        // When the connection is closed we
        // change the relevant properties
        // stop live queries, and trigger.
        __classPrivateFieldGet(this, _Surreal_ws, "f").on("close", () => {
            this.emit("close");
            this.emit("closed");
            __classPrivateFieldGet(this, _Surreal_pinger, "f").stop();
        });
        // When we receive a socket message
        // we process it. If it has an ID
        // then it is a query response.
        __classPrivateFieldGet(this, _Surreal_ws, "f").on("message", (e) => {
            const d = JSON.parse(e.data);
            if (d.method !== "notify") {
                return this.emit(d.id, d);
            }
            if (d.method === "notify") {
                return d.params.forEach((r) => {
                    this.emit("notify", r);
                });
            }
        });
        // Open the websocket for the first
        // time. This will automatically
        // attempt to reconnect on failure.
        __classPrivateFieldGet(this, _Surreal_ws, "f").open();
        //
        //
        //
        return this.wait();
    }
    // --------------------------------------------------
    // Public methods
    // --------------------------------------------------
    sync(query, vars) {
        return new Live(this, query, vars);
    }
    /**
     * Waits for the connection to the database to succeed.
     */
    wait() {
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return __classPrivateFieldGet(this, _Surreal_attempted, "f");
        });
    }
    /**
     * Closes the persistent connection to the database.
     */
    close() {
        __classPrivateFieldGet(this, _Surreal_ws, "f").close();
    }
    // --------------------------------------------------
    /**
     * Ping SurrealDB instance
     */
    ping() {
        const id = guid();
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return new Promise(() => {
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "ping");
            });
        });
    }
    /**
     * Switch to a specific namespace and database.
     * @param ns - Switches to a specific namespace.
     * @param db - Switches to a specific database.
     */
    use(ns, db) {
        const id = guid();
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_result).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "use", [ns, db]);
            });
        });
    }
    /**
     * Retreive info about the current Surreal instance
     * @return Returns nothing!
     */
    info() {
        const id = guid();
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_result).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "info");
            });
        });
    }
    /**
     * Signs up to a specific authentication scope.
     * @param vars - Variables used in a signup query.
     * @return The authenication token.
     */
    signup(vars) {
        const id = guid();
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_signup).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "signup", [vars]);
            });
        });
    }
    /**
     * Signs in to a specific authentication scope.
     * @param vars - Variables used in a signin query.
     * @return The authenication token.
     */
    signin(vars) {
        const id = guid();
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_signin).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "signin", [vars]);
            });
        });
    }
    /**
     * Invalidates the authentication for the current connection.
     */
    invalidate() {
        const id = guid();
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_auth).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "invalidate");
            });
        });
    }
    /**
     * Authenticates the current connection with a JWT token.
     * @param token - The JWT authentication token.
     */
    authenticate(token) {
        const id = guid();
        return __classPrivateFieldGet(this, _Surreal_ws, "f").ready.then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_auth).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "authenticate", [token]);
            });
        });
    }
    // --------------------------------------------------
    live(table) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_result).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "live", [table]);
            });
        });
    }
    /**
     * Kill a specific query.
     * @param query - The query to kill.
     */
    kill(query) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_result).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "kill", [query]);
            });
        });
    }
    /**
     * Switch to a specific namespace and database.
     * @param key - Specifies the name of the variable.
     * @param val - Assigns the value to the variable name.
     */
    let(key, val) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_result).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "let", [key, val]);
            });
        });
    }
    /**
     * Runs a set of SurrealQL statements against the database.
     * @param query - Specifies the SurrealQL statements.
     * @param vars - Assigns variables which can be used in the query.
     */
    query(query, vars) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_result).call(this, res, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "query", [query, vars]);
            });
        });
    }
    /**
     * Selects all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    select(thing) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_output).call(this, res, "select", thing, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "select", [thing]);
            });
        });
    }
    /**
     * Creates a record in the database.
     * @param thing - The table name or the specific record ID to create.
     * @param data - The document / record data to insert.
     */
    create(thing, data) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_output).call(this, res, "create", thing, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "create", [thing, data]);
            });
        });
    }
    /**
     * Updates all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function replaces the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to update.
     * @param data - The document / record data to insert.
     */
    update(thing, data) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_output).call(this, res, "update", thing, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "update", [thing, data]);
            });
        });
    }
    /**
     * Modifies all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function merges the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to change.
     * @param data - The document / record data to insert.
     */
    change(thing, data) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_output).call(this, res, "change", thing, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "change", [thing, data]);
            });
        });
    }
    /**
     * Applies JSON Patch changes to all records, or a specific record, in the database.
     *
     * ***NOTE: This function patches the current document / record data with the specified JSON Patch data.***
     * @param thing - The table name or the specific record ID to modify.
     * @param data - The JSON Patch data with which to modify the records.
     */
    modify(thing, data) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_output).call(this, res, "modify", thing, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "modify", [thing, data]);
            });
        });
    }
    /**
     * Deletes all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    delete(thing) {
        const id = guid();
        return this.wait().then(() => {
            return new Promise((resolve, reject) => {
                this.once(id, (res) => __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_output).call(this, res, "delete", thing, resolve, reject));
                __classPrivateFieldGet(this, _Surreal_instances, "m", _Surreal_send).call(this, id, "delete", [thing]);
            });
        });
    }
}
_Surreal_ws = new WeakMap(), _Surreal_url = new WeakMap(), _Surreal_token = new WeakMap(), _Surreal_pinger = new WeakMap(), _Surreal_attempted = new WeakMap(), _Surreal_instances = new WeakSet(), _Surreal_init = function _Surreal_init() {
    __classPrivateFieldSet(this, _Surreal_attempted, new Promise((res) => {
        __classPrivateFieldGet(this, _Surreal_token, "f")
            ? this.authenticate(__classPrivateFieldGet(this, _Surreal_token, "f")).then(res).catch(res)
            : res();
    }), "f");
}, _Surreal_send = function _Surreal_send(id, method, params = []) {
    __classPrivateFieldGet(this, _Surreal_ws, "f").send(JSON.stringify({
        id: id,
        method: method,
        params: params,
    }));
}, _Surreal_auth = function _Surreal_auth(res, resolve, reject) {
    if (res.error) {
        return reject(new Surreal.AuthenticationError(res.error.message));
    }
    else {
        return resolve(res.result);
    }
}, _Surreal_signin = function _Surreal_signin(res, resolve, reject) {
    if (res.error) {
        return reject(new Surreal.AuthenticationError(res.error.message));
    }
    else {
        __classPrivateFieldSet(this, _Surreal_token, res.result, "f");
        return resolve(res.result);
    }
}, _Surreal_signup = function _Surreal_signup(res, resolve, reject) {
    if (res.error) {
        return reject(new Surreal.AuthenticationError(res.error.message));
    }
    else if (res.result) {
        __classPrivateFieldSet(this, _Surreal_token, res.result, "f");
        return resolve(res.result);
    }
}, _Surreal_result = function _Surreal_result(res, resolve, reject) {
    if (res.error) {
        return reject(new Error(res.error.message));
    }
    else if (res.result) {
        return resolve(res.result);
    }
    return resolve(undefined);
}, _Surreal_output = function _Surreal_output(res, type, id, resolve, reject) {
    if (res.error) {
        return reject(new Error(res.error.message));
    }
    else if (res.result) {
        switch (type) {
            case "delete":
                return resolve(undefined);
            case "create":
                return Array.isArray(res.result) && res.result.length
                    ? resolve(res.result[0])
                    : reject(new Surreal.PermissionError(`Unable to create record: ${id}`));
            case "update":
                if (typeof id === "string" && id.includes(":")) {
                    return Array.isArray(res.result) && res.result.length
                        ? resolve(res.result[0])
                        : reject(new Surreal.PermissionError(`Unable to update record: ${id}`));
                }
                else {
                    return resolve(res.result);
                }
            case "change":
                if (typeof id === "string" && id.includes(":")) {
                    return Array.isArray(res.result) && res.result.length
                        ? resolve(res.result[0])
                        : reject(new Surreal.PermissionError(`Unable to update record: ${id}`));
                }
                else {
                    return resolve(res.result);
                }
            case "modify":
                if (typeof id === "string" && id.includes(":")) {
                    return Array.isArray(res.result) && res.result.length
                        ? resolve(res.result[0])
                        : reject(new Surreal.PermissionError(`Unable to update record: ${id}`));
                }
                else {
                    return resolve(res.result);
                }
            default:
                if (typeof id === "string" && id.includes(":")) {
                    return Array.isArray(res.result) && res.result.length
                        ? resolve(res.result)
                        : reject(new Surreal.RecordError(`Record not found: ${id}`));
                }
                else {
                    return resolve(res.result);
                }
        }
    }
    return resolve(undefined);
};
//# sourceMappingURL=index.js.map